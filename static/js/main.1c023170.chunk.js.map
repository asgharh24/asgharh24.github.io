{"version":3,"sources":["App.js","logo.svg","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["registration","wb","Workbox","App","update","sn","document","getElementById","navigator","addEventListener","showSkipWaitingPrompt","register","then","r","event","className","replace","window","location","reload","waiting","messageSW","type","src","logo","alt","href","target","rel","id","onClick","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1c023170.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Workbox, messageSW} from 'workbox-window';\nimport { BroadcastUpdatePlugin } from 'workbox-broadcast-update';\nconst wb = new Workbox('/service-worker.js');      \nvar registration;\nfunction App() {\n\n  var sn = document.getElementById(\"snackbar\");\n\n  if(process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator)\n  {\n    \n   \n\n    wb.addEventListener('waiting', showSkipWaitingPrompt);\n    wb.addEventListener('externalwaiting', showSkipWaitingPrompt);\n    wb.register().then((r) => registration = r);\n  }\n  var update;\n  const showSkipWaitingPrompt = (event) => {\n    sn.className = \"show\";\n    update = () => {\n      sn.className = sn.className.replace(\"show\", \"\"); \n      wb.addEventListener('controlling', (event) => {\n        window.location.reload();\n        });\n        if (registration && registration.waiting) {\n        messageSW(registration.waiting, {type: 'SKIP_WAITING'});\n    }\n  }\n  } \n\n  \n  const showSnackBar = () => {\n    setTimeout(function(){ sn.className = sn.className.replace(\"show\", \"\"); }, 10000);\n  } \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Latest Application v4\n        </a>\n      </header>\n      <div id=\"snackbar\">An Update is Available <button onClick={()=>{update()}}>Update</button></div>\n    </div>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}